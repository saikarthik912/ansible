#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   https://www.haproxy.org/download/1.8/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     8192
    user        haproxy
    group       haproxy
    daemon
    
    tune.ssl.default-dh-param 2048

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

    # utilize system-wide crypto-policies
    ssl-default-bind-ciphers PROFILE=SYSTEM
    ssl-default-server-ciphers PROFILE=SYSTEM

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    20s
    timeout queue           5s
    timeout connect         5s
    timeout client          100s
    timeout server          100s
    timeout http-keep-alive 100s
    timeout check           20s
    timeout tunnel          5m
    timeout client-fin      10s
    timeout server-fin      10s
    maxconn                 8192

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend www-http
    bind *:80
    reqadd X-Forwarded-Proto:\ http
    option http-server-close
    option forwardfor
    stats uri /haproxy?stats

#    acl url_static       path_beg       -i /static /images /javascript /stylesheets
#    acl url_static       path_end       -i .jpg .gif .png .css .js

#    use_backend static          if url_static
    acl main_server hdr(host) - DOMAIN.io
    acl main_server hdr(host) -i www.DOMAIN.io
    acl main_server hdr(host) -i app.DOMAIN.io
    acl main_server hdr(host) -i staging.DOMAIN.io
    acl keycloak_server hdr(host) -i keycloak.DOMAIN.io
    acl sonar_server hdr(host) -i sonar.DOMAIN.io
    acl spark_server hdr(host) -i spark.DOMAIN.io
    acl trino_server hdr(host) -i trino.DOMAIN.io
    acl trinotest_server hdr(host) -i miniotest.DOMAIN.io
    acl minio_server hdr(host) -i minio.DOMAIN.io
    acl airflow_server hdr(host) -i airflow.DOMAIN.io
    acl airflowstaging_server hdr(host) -i airflowstaging.DOMAIN.io
    acl jenkins_server hdr(host) -i jenkins.DOMAIN.io
    acl kubernetes-dashboard_server hdr(host) -i dashboard.DOMAIN.io
    acl prometheus_server hdr(host) -i prometheus.DOMAIN.io
    acl grafana_server hdr(host) -i grafana.DOMAIN.io
    acl kibana_server hdr(host) -i kibana.DOMAIN.io
    acl querybook_server hdr(host) -i querybook.DOMAIN.io
    acl querybook-test_server hdr(host) -i query-test.DOMAIN.io
    acl test-test_server hdr(host) -i testing.DOMAIN.io    
    acl ranger_server hdr(host) -i ranger.DOMAIN.io
    acl pinot_server hdr(host) -i pinot.DOMAIN.io
    
   
    use_backend app if main_server
    use_backend keycloak-backend if keycloak_server
    use_backend sonar-backend if sonar_server
    use_backend spark-backend if spark_server
    use_backend trino-backend if trino_server
    use_backend trinotest-backend if trinotest_server    
    use_backend minio-backend if minio_server
    use_backend airflow-backend if airflow_server
    use_backend airflowstaging-backend if airflowstaging_server
    use_backend jenkins-backend if jenkins_server
    use_backend kubernetes-dashboard-backend if kubernetes-dashboard_server
    use_backend prometheus-backend if prometheus_server
    use_backend grafana-backend if grafana_server
    use_backend kibana-backend if kibana_server
    use_backend querybook-backend if querybook_server 
    use_backend querybook-test-backend if querybook-test_server
    use_backend test-test-backend if test-test_server
    use_backend ranger-backend if ranger_server
    use_backend pinot-backend if pinot_server


frontend www-https
#    mode tcp
#    option tcplog
    bind *:443 ssl crt /etc/haproxy/certs/DOMAIN.io.pem
    option http-server-close
    option forwardfor
    reqadd X-Forwarded-Proto:\ https
    acl letsencrypt-acl path_beg /.well-known/acme-challenge/
    use_backend letsencrypt-backend if letsencrypt-acl


    acl main_server hdr(host) -i DOMAIN.io
    acl main_server hdr(host) -i www.DOMAIN.io
    acl keycloak_server hdr(host) -i keycloak.DOMAIN.io
    acl main_server hdr(host) -i app.DOMAIN.io
    acl main_server hdr(host) -i staging.DOMAIN.io
    acl sonar_server hdr(host) -i sonar.DOMAIN.io 
    acl spark_server hdr(host) -i spark.DOMAIN.io
    acl trino_server hdr(host) -i trino.DOMAIN.io
    acl trinotest_server hdr(host) -i miniotest.DOMAIN.io
    acl minio_server hdr(host) -i minio.DOMAIN.io
    acl airflow_server hdr(host) -i airflow.DOMAIN.io
    acl airflowstaging_server hdr(host) -i airflowstaging.DOMAIN.io    
    acl jenkins_server hdr(host) -i jenkins.DOMAIN.io
    acl kubernetes-dashboard_server hdr(host) -i dashboard.DOMAIN.io
    acl prometheus_server hdr(host) -i prometheus.DOMAIN.io
    acl grafana_server hdr(host) -i grafana.DOMAIN.io
    acl kibana_server hdr(host) -i kibana.DOMAIN.io
    acl querybook_server hdr(host) -i querybook.DOMAIN.io
    acl querybook-test_server hdr(host) -i query-test.DOMAIN.io
    acl test-test_server hdr(host) -i testing.DOMAIN.io
    acl ranger_server hdr(host) -i ranger.DOMAIN.io
    acl pinot_server hdr(host) -i pinot.DOMAIN.io



#    acl match_host_and_path base trino.passionbytes.io/path
#    redirect prefix https://trino.passionbytes.io/ui/login.html code 303 if { hdr(host) trino.passionbytes.io }
#    http-request set-path /ui/login.html if { path -i / AND hdr(host) trino.passionbytes.io }
#    redirect prefix https://trino.passionbytes.io/ui/login.html code 301 if { path -i / }

    use_backend app-https if main_server
    use_backend keycloak-backend if keycloak_server
    use_backend sonar-backend if sonar_server
    use_backend spark-backend if spark_server
    use_backend trino-backend if trino_server
    use_backend trinotest-backend if trinotest_server
    use_backend minio-backend if minio_server
    use_backend airflow-backend if airflow_server
    use_backend airflowstaging-backend if airflowstaging_server
    use_backend jenkins-backend if jenkins_server
    use_backend kubernetes-dashboard-backend if kubernetes-dashboard_server
    use_backend prometheus-backend if prometheus_server                    
    use_backend grafana-backend if grafana_server
    use_backend querybook-backend if querybook_server
    use_backend kibana-backend if kibana_server
    use_backend querybook-test-backend if querybook-test_server
    use_backend test-test-backend if test-test_server
    use_backend ranger-backend if ranger_server
    use_backend pinot-backend if pinot_server 

    #default_backend app

#---------------------------------------------------------------------
# static backend for serving up images, stylesheets and such
#---------------------------------------------------------------------
#backend static
#    balance     roundrobin
#    server      static 127.0.0.1:4331 check

#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------

backend app-https
    mode        http
    http-response set-header Strict-Transport-Security max-age=31536000
    balance     roundrobin
    stats       enable
    stats auth  root:ingress_https_port
    server  workers SERVER_IP:INGRESS_HTTPS_PORT check maxconn 8192 ssl verify none
    
backend app
    mode        http
    http-response set-header Strict-Transport-Security max-age=31536000
    balance     roundrobin    
    stats       enable
    stats auth  root:ingress_http_port
    server  workers SERVER_IP:INGRESS_HTTP_PORT check

backend keycloak-backend
    mode        http
    balance     roundrobin
    server  workers SERVER_IP:32001 check
    

backend sonar-backend
    mode        http
    balance     roundrobin
    server  workers SERVER_IP:32002 check


backend spark-backend
    mode        http
    balance     roundrobin
    server  workers SERVER_IP:32003 check


backend trino-backend
    mode        http
    balance     roundrobin
    server  workers SERVER_IP:32004 check

backend trinotest-backend
    mode        http
    balance     roundrobin
    server  workers SERVER_IP:32693 check

backend minio-backend
    mode        http
    balance     roundrobin
    server  workers SERVER_IP:32005 check

backend ranger-backend
    mode        http
    balance     roundrobin
    server  workers SERVER_IP:32448 check

backend airflow-backend
    mode        http
    balance     roundrobin
    server  workers SERVER_IP:31837 check

backend jenkins-backend
    mode        http
    balance     roundrobin
    server  workers SERVER_IP:32007 check

backend letsencrypt-backend
   server letsencrypt 127.0.0.1:54321

backend kubernetes-dashboard-backend
    mode        http
    balance     roundrobin
    server  workers SERVER_IP:32008 check

backend prometheus-backend
    mode        http
    balance     roundrobin
    server  workers SERVER_IP:31788 check

backend grafana-backend
    mode        http
    balance     roundrobin
    server  workers SERVER_IP:32000 check


backend kibana-backend
    mode        http
    balance     roundrobin
    server  workers SERVER_IP:32026 check


backend querybook-backend
    mode        http
    balance     roundrobin
    server  workers SERVER_IP:32623 check


backend querybook-test-backend
    mode        http
    balance     roundrobin
    server  workers SERVER_IP:30694 check


backend pinot-backend
    mode        http
    balance     roundrobin
    server  workers SERVER_IP:30588 check

backend test-test-backend
    mode        http
    balance     roundrobin
    server  workers SERVER_IP:32030 check


