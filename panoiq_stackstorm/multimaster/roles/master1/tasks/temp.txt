[init] Using Kubernetes version: v1.27.4\n[preflight] Running pre-flight checks\n[preflight] Pulling images required for setting up a Kubernetes cluster\n[preflight] This might take a minute or two, depending on the speed of your internet connection\n[preflight] You can also perform this action in beforehand using '\"'\"'kubeadm config images pull'\"'\"'\n[certs] Using certificateDir folder /etc/kubernetes/pki\n[certs] Generating ca certificate and key\n[certs] Generating apiserver certificate and key\n[certs] apiserver serving cert is signed for DNS names [ip-172-31-26-107.us-east-2.compute.internal kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 172.31.26.107]\n[certs] Generating apiserver-kubelet-client certificate and key\n[certs] Generating front-proxy-ca certificate and key\n[certs] Generating front-proxy-client certificate and key\n[certs] Generating etcd/ca certificate and key\n[certs] Generating etcd/server certificate and key\n[certs] etcd/server serving cert is signed for DNS names [ip-172-31-26-107.us-east-2.compute.internal localhost] and IPs [172.31.26.107 127.0.0.1 ::1]\n[certs] Generating etcd/peer certificate and key\n[certs] etcd/peer serving cert is signed for DNS names [ip-172-31-26-107.us-east-2.compute.internal localhost] and IPs [172.31.26.107 127.0.0.1 ::1]\n[certs] Generating etcd/healthcheck-client certificate and key\n[certs] Generating apiserver-etcd-client certificate and key\n[certs] Generating sa key and public key\n[kubeconfig] Using kubeconfig folder /etc/kubernetes\n[kubeconfig] Writing admin.conf kubeconfig file\n[kubeconfig] Writing kubelet.conf kubeconfig file\n[kubeconfig] Writing controller-manager.conf kubeconfig file\n[kubeconfig] Writing scheduler.conf kubeconfig file\n[kubelet-start] Writing kubelet environment file with flags to file /var/lib/kubelet/kubeadm-flags.env\n[kubelet-start] Writing kubelet configuration to file /var/lib/kubelet/config.yaml\n[kubelet-start] Starting the kubelet\n[control-plane] Using manifest folder /etc/kubernetes/manifests\n[control-plane] Creating static Pod manifest for kube-apiserver\n[control-plane] Creating static Pod manifest for kube-controller-manager\n[control-plane] Creating static Pod manifest for kube-scheduler\n[etcd] Creating static Pod manifest for local etcd in /etc/kubernetes/manifests\n[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory /etc/kubernetes/manifests. This can take up to 4m0s\n[apiclient] All control plane components are healthy after 5.502380 seconds\n[upload-config] Storing the configuration used in ConfigMap kubeadm-config in the kube-system Namespace\n[kubelet] Creating a ConfigMap kubelet-config in namespace kube-system with the configuration for the kubelets in the cluster\n[upload-certs] Storing the certificates in Secret kubeadm-certs in the kube-system Namespace\n[upload-certs] Using certificate key:\n24ac55ab3c79777164fab62061753ed3e9457847c6c775347f39921c1f011a5d\n[mark-control-plane] Marking the node ip-172-31-26-107.us-east-2.compute.internal as control-plane by adding the labels: [node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers]\n[mark-control-plane] Marking the node ip-172-31-26-107.us-east-2.compute.internal as control-plane by adding the taints [node-role.kubernetes.io/control-plane:NoSchedule]\n[bootstrap-token] Using token: qp5qs2.8d38djre0u2is8mc\n[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles\n[bootstrap-token] Configured RBAC rules to allow Node Bootstrap tokens to get nodes\n[bootstrap-token] Configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials\n[bootstrap-token] Configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token\n[bootstrap-token] Configured RBAC rules to allow certificate rotation for all node client certificates in the cluster\n[bootstrap-token] Creating the cluster-info ConfigMap in the kube-public namespace\n[kubelet-finalize] Updating /etc/kubernetes/kubelet.conf to point to a rotatable kubelet client certificate and key\n[addons] Applied essential addon: CoreDNS\n[addons] Applied essential addon: kube-proxy\n\nYour Kubernetes control-plane has initialized successfully!\n\nTo start using your cluster, you need to run the following as a regular user:\n\n  mkdir -p /root/.kube\n  sudo cp -i /etc/kubernetes/admin.conf /root/.kube/config\n  sudo chown $(id -u):$(id -g) /root/.kube/config\n\nAlternatively, if you are the root user, you can run:\n\n  export KUBECONFIG=/etc/kubernetes/admin.conf\n\nYou should now deploy a pod network to the cluster.\nRun kubectl' apply -f '[podnetwork].yaml with one of the options listed at:\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nYou can now join any number of the control-plane node running the following command on each as root:\n\n  kubeadm join 172.31.26.107:6443 --token qp5qs2.8d38djre0u2is8mc \\\n\t--discovery-token-ca-cert-hash sha256:c802e6ea83eb79c2ba7aa3779fafd7d1e56eae840735853d1628b9e61c258e94 \\\n\t--control-plane --certificate-key 24ac55ab3c79777164fab62061753ed3e9457847c6c775347f39921c1f011a5d\n\nPlease note that the certificate-key gives access to cluster sensitive data, keep it secret!\nAs a safeguard, uploaded-certs will be deleted in two hours; If necessary, you can use\nkubeadm' init phase upload-certs '--upload-certs to reload certs afterward.\n\nThen you can join any number of worker nodes by running the following on each as root:\n\nkubeadm join 176.31.26.107:6443 --token qp5qs2.8d38djre0u2is8mc \\\n\t--discovery-token-ca-cert-hash sha256:c802e6ea83eb79c2ba7aa3779fafd7d1e57eae840735853d1628b9e61c258e94

